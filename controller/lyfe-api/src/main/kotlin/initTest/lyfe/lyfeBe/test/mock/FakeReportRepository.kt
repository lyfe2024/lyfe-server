package initTest.lyfe.lyfeBe.test.mock

import lyfe.lyfeBe.report.Report
import lyfe.lyfeBe.report.port.out.ReportPort
import org.springframework.data.domain.Pageable
import java.time.Instant
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeReportRepository: ReportPort {

    private val autoGeneratedId = AtomicLong(0)
    private val data: MutableList<Report> = Collections.synchronizedList(ArrayList())
    override fun create(report: Report): Report {
        return if (report.id == 0L) {
            val newReport = report.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newReport)
            newReport
        } else {
            data.removeIf { it.id == report.id }
            data.add(report)
            report
        }
    }

    override fun update(report: Report): Report {
        data.removeIf { it.id == report.id }
        data.add(report)
        return report
    }

    override fun getById(reportId: Long): Report {
        return data.find { it.id == reportId }?: throw NoSuchElementException()
    }

    override fun getByUserIdAndReportTargetId(userId: Long, reportTargetId: Long): Report? {
        return data.find { it.reporter.id == userId && it.reportTargetId == reportTargetId }
    }

    override fun getReportedCount(reportTargetId: Long): Int {
        return data.count { it.reportTargetId == reportTargetId }
    }

    override fun getReportsWithCursor(cursorId: Long, pageable: Pageable): List<Report> {
        return data.filter { it.id > cursorId }.sortedByDescending { it.id }.take(pageable.pageSize)
    }

    override fun cancel(report: Report): Report {
        data.find { it.id == report.id } ?: throw NoSuchElementException("Report not found with id: $report.id")
        val updatedReport = report.copy(
            isCanceled = !report.isCanceled, // 토글
            canceledAt = if (report.isCanceled) null else Instant.now()
        )
        data.removeIf { it.id == updatedReport.id }
        data.add(updatedReport)
        return updatedReport
    }

    override fun getReportedCountsByUserIds(userIds: Set<Long>): Map<Long, Int> {
        return data.filter { it.reportTargetId in userIds }.groupBy { it.reportTargetId }.mapValues { it.value.size }
    }

    fun clear() {
        data.clear()
    }
}
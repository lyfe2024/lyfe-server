package initTest.lyfe.lyfeBe.test.mock

import lyfe.lyfeBe.board.Board
import lyfe.lyfeBe.board.port.out.BoardPort
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeBoardRepository : BoardPort {

    private val autoGeneratedId = AtomicLong(0)
    private val data: MutableList<Board> = Collections.synchronizedList(ArrayList())

    override fun getById(id: Long) = data.find { it.id == id }!!

    override fun create(board: Board): Board {
        return if (board.id == 0L) {
            val newBoard = board.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newBoard)
            newBoard
        } else {
            data.removeIf { it.id == board.id }
            data.add(board)
            board
        }
    }

    override fun update(board: Board): Board {
        val index = data.indexOfFirst { it.id == board.id }
        if (index != -1) {
            data[index] = board
        }
        return board
    }

    override fun findAll(paging: Long, size: Int): List<Board> {
        // 데이터 리스트를 ID 기준으로 내림차순 정렬
        val sortedData = data.sortedByDescending { it.id }

        // paging 값보다 작거나 같은 ID를 가진 데이터 선택
        val filteredData = sortedData.takeWhile { it.id <= paging }

        // 상위 size 개수만큼의 데이터 반환
        return filteredData.take(size)
    }

    fun clear() {
        data.clear()
    }
}
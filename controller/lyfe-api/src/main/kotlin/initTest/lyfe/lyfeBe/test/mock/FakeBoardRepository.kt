package initTest.lyfe.lyfeBe.test.mock

import lyfe.lyfeBe.board.Board
import lyfe.lyfeBe.board.port.out.BoardPort
import org.springframework.data.domain.Page
import org.springframework.data.domain.PageImpl
import org.springframework.data.domain.Pageable
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeBoardRepository : BoardPort {

    private val autoGeneratedId = AtomicLong(0)
    private val data: MutableList<Board> = Collections.synchronizedList(ArrayList())

    override fun getById(id: Long) = data.find { it.id == id }!!

    override fun create(board: Board): Board {
        return if (board.id == 0L) {
            val newBoard = board.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newBoard)
            newBoard
        } else {
            data.removeIf { it.id == board.id }
            data.add(board)
            board
        }
    }

    override fun update(board: Board): Board {
        val index = data.indexOfFirst { it.id == board.id }
        if (index != -1) {
            data[index] = board
        }
        return board
    }



    override fun findByIdCursorId(boardId: Long, paging: Pageable): Page<Board> {

        // data 리스트에서 필터링 및 정렬을 수행
        val filteredData = data.filter {
             it.id < boardId
        }.sortedByDescending { it.id }

        // 페이징 처리
        val pageStart = paging.pageNumber * paging.pageSize
        val pageEnd = (pageStart + paging.pageSize).coerceAtMost(filteredData.size)
        val pageContent = filteredData.subList(pageStart, pageEnd)

        return PageImpl(pageContent, paging, paging.pageSize.toLong())

    }

    override fun findPopularBoards(boardId: Long, paging: Pageable): Page<Board> {
        TODO("Not yet implemented")
    }

    override fun findRecentBoardPictures(boardId: Long, paging: Pageable): Page<Board> {
        TODO("Not yet implemented")
    }

    fun clear() {
        data.clear()
    }
}
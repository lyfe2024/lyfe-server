package initTest.lyfe.lyfeBe.test.mock

import lyfe.lyfeBe.whisky.Whisky
import lyfe.lyfeBe.whisky.out.WhiskyPort
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakeWhiskyRepository : WhiskyPort {
    private val autoGeneratedId = AtomicLong(0)
    private val data: MutableList<Whisky> = Collections.synchronizedList(ArrayList())


    override fun countByBoardId(boardId: Long) = 1

    override fun create(whisky: Whisky): Whisky {
        return if (whisky.id == 0L) {
            val newWhisky = whisky.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newWhisky)
            newWhisky
        } else {
            data.removeIf { it.id == whisky.id }
            data.add(whisky)
            whisky
        }
    }

    override fun update(boardId: Long) {
        TODO("Not yet implemented")
    }

    override fun assertNoExistingWhisky(boardId: Long, userId: Long) {
        val existingWhisky = data.find { it.board.id == boardId && it.user.id == userId }
        if (existingWhisky != null) {
            throw IllegalStateException("이미 좋아요를 누른 게시글입니다.")
        }
    }

    override fun delete(boardId: Long, userId: Long) {
        data.removeIf { it.board.id == boardId && it.user.id == userId }
    }

    fun clear() {
        data.clear()
    }

    override fun get(whiskyId: Long) = data.find { it.id == whiskyId }!!
}

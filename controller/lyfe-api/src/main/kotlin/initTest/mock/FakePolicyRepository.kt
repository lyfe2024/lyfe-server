package initTest.mock

import lyfe.lyfeBe.policy.Policy
import lyfe.lyfeBe.policy.PolicyType
import lyfe.lyfeBe.policy.out.PolicyPort
import java.util.*
import java.util.concurrent.atomic.AtomicLong

class FakePolicyRepository : PolicyPort {

    private val autoGeneratedId = AtomicLong(0)
    private val data: MutableList<Policy> = Collections.synchronizedList(ArrayList())


    override fun getPolicy(type: PolicyType): Policy {
        return data.find { it.policyType == type }!!
    }

    override fun findById(id: Long) = data.find { it.id == id }!!

    override fun create(policy: Policy): Policy {
        return if (policy.id == 0L) {
            val newPolicy = policy.copy(id = autoGeneratedId.incrementAndGet())
            data.add(newPolicy)
            newPolicy
        } else {
            data.removeIf { it.id == policy.id }
            data.add(policy)
            policy
        }
    }

    override fun update(policy: Policy): Policy {
        val index = data.indexOfFirst { it.id == policy.id }
        if (index != -1) {
            data[index] = policy
        }
        return policy
    }

    fun clear() {
        data.clear()
    }
}